<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="8" passed="6" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-10-17T12:41:29 IST" name="Suite" finished-at="2024-10-17T12:42:07 IST" duration-ms="38030">
    <groups>
    </groups>
    <test started-at="2024-10-17T12:41:29 IST" name="Test" finished-at="2024-10-17T12:42:07 IST" duration-ms="38030">
      <class name="script.DemoY">
        <test-method signature="createUser()[pri:0, instance:script.DemoY@2a693f59]" started-at="2024-10-17T12:42:07 IST" name="createUser" finished-at="2024-10-17T12:42:07 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
        <test-method is-config="true" signature="am(org.testng.ITestResult)[pri:0, instance:script.DemoY@2a693f59]" started-at="2024-10-17T12:42:07 IST" name="am" finished-at="2024-10-17T12:42:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUser status=SUCCESS method=DemoY.createUser()[pri:0, instance:script.DemoY@2a693f59] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- am -->
        <test-method signature="deleteUser()[pri:0, instance:script.DemoY@2a693f59]" started-at="2024-10-17T12:42:07 IST" name="deleteUser" finished-at="2024-10-17T12:42:07 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.fail(Assert.java:116)
at script.DemoY.deleteUser(DemoY.java:30)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser -->
        <test-method is-config="true" signature="am(org.testng.ITestResult)[pri:0, instance:script.DemoY@2a693f59]" started-at="2024-10-17T12:42:07 IST" name="am" finished-at="2024-10-17T12:42:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteUser status=FAILURE method=DemoY.deleteUser()[pri:0, instance:script.DemoY@2a693f59] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- am -->
      </class> <!-- script.DemoY -->
      <class name="script.DemoX">
        <test-method is-config="true" signature="bm(java.lang.reflect.Method)[pri:0, instance:script.DemoX@433defed]" started-at="2024-10-17T12:42:07 IST" name="bm" finished-at="2024-10-17T12:42:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void script.DemoX.createUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bm -->
        <test-method signature="createUser()[pri:0, instance:script.DemoX@433defed]" started-at="2024-10-17T12:42:07 IST" name="createUser" finished-at="2024-10-17T12:42:07 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
        <test-method is-config="true" signature="bm(java.lang.reflect.Method)[pri:0, instance:script.DemoX@433defed]" started-at="2024-10-17T12:42:07 IST" name="bm" finished-at="2024-10-17T12:42:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void script.DemoX.deleteUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bm -->
        <test-method signature="deleteUser()[pri:0, instance:script.DemoX@433defed]" started-at="2024-10-17T12:42:07 IST" name="deleteUser" finished-at="2024-10-17T12:42:07 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser -->
      </class> <!-- script.DemoX -->
      <class name="script.Demo4">
        <test-method is-config="true" signature="bm()[pri:0, instance:script.Demo4@548a24a]" started-at="2024-10-17T12:42:07 IST" name="bm" finished-at="2024-10-17T12:42:07 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bm -->
        <test-method signature="createUser()[pri:0, instance:script.Demo4@548a24a]" started-at="2024-10-17T12:42:07 IST" name="createUser" finished-at="2024-10-17T12:42:07 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
      </class> <!-- script.Demo4 -->
      <class name="script.Demo3">
        <test-method is-config="true" signature="preCondition(java.lang.reflect.Method)[pri:0, instance:script.Demo3@1040be71]" started-at="2024-10-17T12:41:57 IST" name="preCondition" finished-at="2024-10-17T12:42:05 IST" duration-ms="8327" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void script.Demo3.testC()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="testC()[pri:0, instance:script.Demo3@1040be71]" started-at="2024-10-17T12:42:05 IST" name="testC" finished-at="2024-10-17T12:42:05 IST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testC -->
        <test-method is-config="true" signature="postCondition(org.testng.ITestResult)[pri:0, instance:script.Demo3@1040be71]" started-at="2024-10-17T12:42:05 IST" name="postCondition" finished-at="2024-10-17T12:42:07 IST" duration-ms="1608" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testC status=SUCCESS method=Demo3.testC()[pri:0, instance:script.Demo3@1040be71] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
      </class> <!-- script.Demo3 -->
      <class name="script.Demo2">
        <test-method is-config="true" signature="preCondition(java.lang.reflect.Method)[pri:0, instance:script.Demo2@6f10d5b6]" started-at="2024-10-17T12:41:46 IST" name="preCondition" finished-at="2024-10-17T12:41:55 IST" duration-ms="9019" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void script.Demo2.testB()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="testB()[pri:0, instance:script.Demo2@6f10d5b6]" started-at="2024-10-17T12:41:55 IST" name="testB" finished-at="2024-10-17T12:41:55 IST" duration-ms="25" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.fail(Assert.java:116)
at script.Demo2.testB(Demo2.java:15)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
        <test-method is-config="true" signature="postCondition(org.testng.ITestResult)[pri:0, instance:script.Demo2@6f10d5b6]" started-at="2024-10-17T12:41:55 IST" name="postCondition" finished-at="2024-10-17T12:41:57 IST" duration-ms="2146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testB status=FAILURE method=Demo2.testB()[pri:0, instance:script.Demo2@6f10d5b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
      </class> <!-- script.Demo2 -->
      <class name="script.Demo1">
        <test-method is-config="true" signature="initReport()[pri:0, instance:script.Demo1@305ffe9e]" started-at="2024-10-17T12:41:28 IST" name="initReport" finished-at="2024-10-17T12:41:29 IST" duration-ms="517" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initReport -->
        <test-method is-config="true" signature="preCondition(java.lang.reflect.Method)[pri:0, instance:script.Demo1@305ffe9e]" started-at="2024-10-17T12:41:29 IST" name="preCondition" finished-at="2024-10-17T12:41:43 IST" duration-ms="14556" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void script.Demo1.testA()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="testA()[pri:0, instance:script.Demo1@305ffe9e]" started-at="2024-10-17T12:41:43 IST" name="testA" finished-at="2024-10-17T12:41:43 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method is-config="true" signature="postCondition(org.testng.ITestResult)[pri:0, instance:script.Demo1@305ffe9e]" started-at="2024-10-17T12:41:43 IST" name="postCondition" finished-at="2024-10-17T12:41:46 IST" duration-ms="2174" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testA status=SUCCESS method=Demo1.testA()[pri:0, instance:script.Demo1@305ffe9e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method is-config="true" signature="generateReport()[pri:0, instance:script.Demo1@305ffe9e]" started-at="2024-10-17T12:42:07 IST" name="generateReport" finished-at="2024-10-17T12:42:07 IST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
      </class> <!-- script.Demo1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
